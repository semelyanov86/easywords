name: Other
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/user
    metadata:
      title: 'User Information'
      description: 'Getting authenticated user information'
      authenticated: true
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
    responseFields: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{user_id}/words'
    metadata:
      title: 'List of user words'
      description: 'Getting list of words of other users. Currently not implemented.'
      authenticated: true
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 19
        type: integer
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 503
        content: ''
        headers: []
        description: '503'
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
    responseFields: []
  -
    httpMethods:
      - POST
    uri: 'api/users/{user}/words'
    metadata:
      title: 'Store word by user'
      description: 'Creating new word of passed user. Currently this functionality not implemented'
      authenticated: true
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user:
        name: user
        description: ''
        required: true
        example: 6
        type: integer
    queryParameters: []
    bodyParameters:
      original:
        name: original
        description: 'Must not be greater than 255 characters.'
        required: true
        example: dhwkijnssacprrywwjgobaivurhoasydvsbcosanxvtxmbijdeltpgiqyahqjveqlibuoowujnquwidtxibvtvlkrgnpwuxnkswlmcezbokgjbyyhgxtesucbhlbxcenvoxyumghefwkcgaunuloolpihojwvyhgkmtjcoqjhsljhlpjnvchcxfufxrvynjjcvyeufmrgkaqaqugokzijsjzzgjgdmemgpxgvlamcnwosmvyswjegxpdpdoqv
        type: string
      translated:
        name: translated
        description: 'Must not be greater than 255 characters.'
        required: true
        example: lbwsbdopqznaenroogavvxhuynbsrvtunpdjphvlmylmqlpxcaduvbmwzequzsadaogvarqfybw
        type: string
      done_at:
        name: done_at
        description: 'Must be a valid date.'
        required: false
        example: '2021-09-02T19:23:32'
        type: string
      starred:
        name: starred
        description: ''
        required: true
        example: false
        type: boolean
      language:
        name: language
        description: 'Must not be greater than 5 characters.'
        required: true
        example: ''
        type: string
      views:
        name: views
        description: 'Must not be greater than 255 characters.'
        required: true
        example: avofuqgiptaaimwlwuyczhjzcnkuuowfenlkejojgjqoupfjqllqpnkaocnuuiufhnqqztbpppaitfblmiaexlkoumhdlekxblrczjtymazekpfgctgvbtkpmcztpkpcrizkndlbjinboticpkkuuodyezvrczg
        type: string
    responses:
      -
        status: 503
        content: ''
        headers: []
        description: '503'
    responseFields: []
